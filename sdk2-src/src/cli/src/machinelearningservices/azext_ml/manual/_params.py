# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements


def load_arguments(self, _):

    with self.argument_context('ml code-job create') as c:
        c.argument('file', help="yaml file to generate code job from")
        c.argument('save_as', help="file to save code job to")

    with self.argument_context('ml datastore attach-blob') as c:
        c.argument('subscription-id', help="subscription id of workspace")
        c.argument('resource-group', help="resource group of workspace")
        c.argument('workspace-name', help="workspace to which blob container will be attached")
        c.argument('account-name', help="name of storage account")
        c.argument('container-name', help="name of blob container to attach to workspace")
        c.argument('name', help="datastore name")
        c.argument('account-key', help="storage account key")
        c.argument('sas-token', help="sas token for storage account")
        c.argument('protocol', help="protocol used to connect to blob container")
        c.argument('endpoint', help="The endpoint of the storage account. Defaults to core.windows.net.")

    with self.argument_context('ml datastore detach') as c:
        c.argument('subscription-id', help="subscription id of workspace")
        c.argument('resource-group', help="resource group of workspace")
        c.argument('workspace-name', help="workspace to which blob container will be attached")
        c.argument('name', help="name of datastore to detach from workspace")

    with self.argument_context('ml datastore show') as c:
        c.argument('include-secrets', action="store_true", help="when argument present, returns secrets for datastore")

    with self.argument_context('ml datastore list') as c:
        c.argument('include-secrets', action="store_true", help="when argument present, returns secrets for datastore")

    with self.argument_context('ml model create') as c:
        c.argument('name', help="The name under which the model should be registered")
        c.argument('version', help="The version id to be set on the version. Any string is allowed, but needs to be unique to the asset, i.e., no two versions of an asset can have the same version.")
        c.argument('file', help="The yaml file containing the entity’s AzureML specification.")
        c.argument('mlflow-folder', help="Instead of –file pointing to an AzureML specification, the user can point to folder containing an MLModel file according to the MLFlow specification. See the MLFlow Model documentation for details")

    with self.argument_context('ml model show') as c:
        c.argument('name', help="Instead of the –id parameter, the name of the resource can be provided to which the operation should be applied.")

    with self.argument_context('ml model list') as c:
        c.argument('filter', help="A filter expression to filter the list of assets returned. we have yet to define the filter expression language to support. On a high level the asset type will be filtered by the noun on which the list operation is executed (e.g. az ml component list). In addition, we will need filtering by name, tags, label, type (in the case of component), creation_context.created_by, creation_context.created_time (range), asset.creation_context.created_by, asset.id, asset.tags, and probably a few more.")
