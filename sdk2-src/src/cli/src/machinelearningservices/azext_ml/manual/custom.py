# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.machinelearning import MachineLearningClient
from azure.identity import AzureCliCredential
from azure.cli.core.commands.client_factory import get_subscription_id


def ml_code_job_create(cmd,
                       resource_group_name,
                       workspace_name,
                       name=None,
                       code_configuration=None,
                       environment_id=None,
                       data_bindings=None,
                       experiment_name=None,
                       properties=None,
                       tags=None,
                       compute_binding=None,
                       file=None,
                       save_as=None):

    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    try:
        return ml_client.jobs.submit(
            job_name=name,
            compute_id=compute_binding['compute_id'] if compute_binding is not None else compute_binding,
            experiment_name=experiment_name,
            environment_id=environment_id,
            save_as_name=save_as,
            file=file)
    except Exception as err:
        print(str(err))


def ml_code_job_show(cmd, resource_group_name, workspace_name, name):

    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    try:
        return ml_client.jobs.get(job_name=name)
    except Exception as err:
        print(str(err))


def ml_code_job_list(cmd, resource_group_name, workspace_name):

    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    try:
        return ml_client.jobs.list()
    except Exception as err:
        print(str(err))


def ml_endpoint_show(cmd, subscription_id, resource_group_name, workspace_name, name):
    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())
    return ml_client._online_endpoints.get(name=name)


def ml_endpoint_create(cmd, resource_group_name, workspace_name, name, properties=None, file=None):

    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())
    return ml_client.online_endpoints.create_or_update(name=name, file=file)


def ml_model_create(cmd, resource_group_name, workspace_name, name, file=None, mlflow_folder=None, version=None):
    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    return ml_client.model.create(name=name, file=file, mlflow_folder=mlflow_folder, version=version)


def ml_model_show(cmd, resource_group_name, workspace_name, name):
    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    return ml_client.model.show(name=name)


def ml_model_list(cmd, resource_group_name, workspace_name, filter=None):
    subscription_id = get_subscription_id(cmd.cli_ctx)

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    return ml_client.model.list(filter=filter)


def ml_datastore_attach_blob(cmd,
                             subscription_id,
                             resource_group_name,
                             workspace_name,
                             account_name,
                             container_name,
                             name,
                             account_key=None,
                             sas_token=None,
                             protocol=None,
                             endpoint=None):

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())

    return ml_client.datastores.attach_azure_blob_storage(name,
                                                          container_name,
                                                          account_name,
                                                          account_key=account_key,
                                                          sas_token=sas_token,
                                                          protocol=protocol,
                                                          endpoint=endpoint)


def ml_datastore_detach(cmd, subscription_id, resource_group_name, workspace_name, datastore_name):

    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name,
                                      credential=AzureCliCredential())
    return ml_client.datastores.delete(datastore_name)


def ml_datastore_show(cmd, subscription_id, resource_group_name, workspace_name, datastore_name, include_secrets=False):
    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name)
    return ml_client.datastores.show(datastore_name, include_secrets=include_secrets)


def ml_datastore_list(client,
                      subscription_id,
                      resource_group_name,
                      workspace_name,
                      include_secrets=False,
                      skip_token=None,
                      count=None,
                      is_default=None,
                      names=None,
                      search_text=None,
                      order_by=None,
                      order_by_asc=None):
    ml_client = MachineLearningClient(subscription_id=subscription_id,
                                      resource_group_name=resource_group_name,
                                      default_workspace_name=workspace_name)
    return ml_client.datastores.list(include_secrets=include_secrets)
